'use strict';

const pump = require('pump');
const split = require('split2');
const through = require('through2');
const appInsights = require("applicationinsights");

const argv = require('yargs')
    .usage('Usage: $0 --aiinskey [application insights instrumentation key]')
    // .demandOption(['aiinskey'])
    .argv;

const parseJson = function(line) {
    try {
        obj = JSON.parse(line);
        return obj;
    } catch (error) {
        return {
            // mark to tell it is a parsing error
            itsError: true,
            error: error
        };
    }
}

const pinoAppInsights = function(options) {
    // disable a lot of options from AI because they are useless for this transport (it is not the real web app)
    appInsights.setup(options.appInsightsInstrumKey)
        .setAutoDependencyCorrelation(false)
        .setAutoCollectRequests(false)
        .setAutoCollectPerformance(false)
        .setAutoCollectDependencies(false)
        .setAutoCollectConsole(false);

    appInsights.start();
    let client = appInsights.defaultClient;

    return through.obj(function (chunk, enc, callback) {
        if (chunk) {
            // if it was an error generated by this program
            if (chunk.itsError) {
                client.trackException({ exception: chunk.error });
            } else {
                client.trackTrace({ message: "trace message" });

            }
        }

        // call the callback even if chunk is discarded
        // https://www.npmjs.com/package/through2
        callback();
    });
}

var onRequest = function(obj) {
    var tmRequest = {
        /**
         * Request name
         */
        name: obj.msg,
        /**
         * Request url
         */
        url: obj.req.url,
        /**
         * Request source. This encapsulates the information about the component that initiated the request
         */
        source?: JSON.stringify(obj.req),
        /**
         * Request duration in ms
         */
        duration: 0,
        /**
         * Result code reported by the application
         */
        resultCode: obj.res.statusCode,
        /**
         * Whether the request was successful
         */
        success: obj.res.statusCode == 200,
    };
}

pump(process.stdin, split(parseJson), pinoAppInsights({ appInsightsInstrumKey: argv.aiinskey }));
