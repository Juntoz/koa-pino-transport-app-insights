'use strict';

const pump = require('pump');
const split = require('split2');
const through = require('through2');
const appInsights = require("applicationinsights");
const pinoToAI = require('./pino-to-ai.js');

const argv = require('yargs')
    .usage('Usage: $0 --aikey [application insights instrumentation key]')
    .demandOption(['aikey'])
    .argv;

const parseJson = function(line) {
    try {
        var obj = JSON.parse(line);
        return obj;
    } catch (error) {
        throw new Error("parseJson:" + error.message);
    }
}

function pinoAppInsights(options) {
    // disable a lot of options from AI because they are useless for this transport (it is not the real web app)
    appInsights.setup(options.appInsightsInstrumKey)
        .setAutoDependencyCorrelation(false)
        .setAutoCollectRequests(false)
        .setAutoCollectPerformance(false)
        .setAutoCollectDependencies(false)
        .setAutoCollectConsole(false);

    appInsights.start();
    let appInsightsClient = appInsights.defaultClient;

    return through.obj(function (chunk, enc, callback) {
        if (chunk) {
            processMessage(appInsightsClient, chunk);
        }

        // call the callback even if chunk is discarded
        // https://www.npmjs.com/package/through2
        callback();
    });
}

function processMessage(appInsightsClient, message) {
    // if it was an error generated by this program
    if (message.itsError) {
        onException(appInsightsClient, message);
    } else {
        var msgClass = classifyMessage(message);

        if (msgClass == "REQUEST_COMPLETE") {
            onRequestComplete(appInsightsClient, message);
        } else if (msgClass == "EXCEPTION") {
            onException(appInsightsClient, message);
        } else {
            onTrace(appInsightsClient, message);
        }
    }
}

function classifyMessage(message) {
    // NOTE: sort conditions from most specific to less
    if (message.level === 30 && message.msg == "request completed") {
        return "REQUEST_COMPLETE";
    }

    // only send exception if the Error object is there
    if (message.level == 50 && message.err) {
        return "EXCEPTION";
    }

    return "TRACE";
}

function onRequestComplete(appInsightsClient, message) {
    var isOk = (statusCode) => {
        return statusCode >= 200 && statusCode < 400;
    }

    // follow ApplicationInsights.Contracts.RequestTelemetry
    var aiObj = {
        /**
         * Request name
         */
        name: message.time,
        /**
         * Request url
         */
        url: message.req.url,
        /**
         * Request source. This encapsulates the information about the component that initiated the request
         */
        source: message.req,
        /**
         * Request duration in ms
         */
        duration: message.responseTime || 0,
        /**
         * Result code reported by the application
         */
        resultCode: message.res.statusCode,
        /**
         * Whether the request was successful
         */
        success: isOk(message.res.statusCode),
    };

    appInsightsClient.trackRequest(aiObj);
    console.log(`on-request: sent message ${message.time} to AI`);
    return aiRequest;
}

function onTrace(appInsightsClient, message) {
    // follow ApplicationInsights.Contracts.TraceTelemetry
    var aiObj = {
        /**
         * Trace message
         */
        message: message.msg,
        /**
         * Trace severity level
         */
        severity: pinoToAI(message.level)
    };

    appInsightsClient.trackTrace(aiObj);
    console.log(`on-trace: sent message ${message.time} to AI`);
    return aiObj;
}

function onException(appInsightsClient, message) {
    // follow ApplicationInsights.Contracts.ExceptionTelemetry
    var aiObj = {
        /**
         * Exception thrown
         */
        exception: message.err
    };

    appInsightsClient.trackException(aiObj);
    console.log(`on-exception: sent message ${message.time} to AI`);
    return aiObj;
}

pump(
    process.stdin,
    split(parseJson),
    pinoAppInsights({ appInsightsInstrumKey: argv.aikey })
);
